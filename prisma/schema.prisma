generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  TEACHER
  STUDENT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  classId       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  class       Class?       @relation("ClassStudents", fields: [classId], references: [id])
  teacherOf   Class[]      @relation("ClassTeacher")
  submissions Submission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher     User         @relation("ClassTeacher", fields: [teacherId], references: [id])
  students    User[]       @relation("ClassStudents")
  assignments Assignment[]
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  problems    Json
  classId     String
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  class       Class        @relation(fields: [classId], references: [id])
  submissions Submission[]
}

model Submission {
  id                String    @id @default(cuid())
  studentId         String
  assignmentId      String
  answers           Json?     // 학생 답안 { "problemId": { "answer": "3", "hasDrawing": true } }
  recordingUrl      String?   // 녹화 파일 URL (레거시 - 전체 과제 녹화)
  recordingDuration Int?      // 녹화 총 시간 (초) (레거시)
  segments          Json?     // 활동 세그먼트 타임라인 (레거시) [{ type, startTime, endTime, duration }]
  feedback          String?   // 교사 피드백
  score             Int?      // 총점
  submittedAt       DateTime? // 제출 시각
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  student           User               @relation(fields: [studentId], references: [id])
  assignment        Assignment         @relation(fields: [assignmentId], references: [id])
  problemRecordings ProblemRecording[] // 문제별 녹화 파일

  @@unique([studentId, assignmentId])
}

model ProblemRecording {
  id                String   @id @default(cuid())
  submissionId      String
  problemId         String   // 문제 고유 ID
  problemIndex      Int      // 문제 순서 (0부터 시작)
  recordingUrl      String   // 이 문제의 녹화 파일 URL
  capturedImageUrl  String?  // 학생 필기가 포함된 캡처 이미지 URL
  duration          Int      // 녹화 시간 (초)
  segments          Json?    // 활동 세그먼트 [{ type, startTime, endTime, duration }]
  visitCount        Int      @default(1) // 방문 횟수 (재녹화 추적용)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, problemId])
  @@index([submissionId, problemIndex])
}

model Problem {
  id                  String   @id @default(cuid())
  sourceId            String   @unique // 원본 데이터의 ID
  sourceDataName      String
  grade               String
  semester            String
  subject             String
  difficulty          String   // 상, 중, 하
  problemType         String   // 객관식, 주관식
  imageUrl            String?  // 문제 이미지 경로
  achievementStandards Json    // 성취기준 객체 { "2015": ["[4수01-05]"], "2022": ["[4수01-06]"] }
  unit                String?  // 단원 (레거시)
  area                String?  // 수학 영역 (수와 연산, 변화와 관계, 도형과 측정, 자료와 가능성)
  contentElement      String?  // 내용 요소 (영역의 하위 분류)
  school              String?  // 학교급
  sections            Json     // 문제 섹션 데이터
  metadata            Json     // 기타 메타데이터
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([grade, semester, difficulty])
  @@index([school, grade])
  @@index([unit])
  @@index([area])
  @@index([contentElement])
  @@index([area, contentElement])
  @@index([area, grade, difficulty])
  @@index([area, contentElement, difficulty])
}
